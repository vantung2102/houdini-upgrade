'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = mask;

function mask() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? { pattern: '', placeholder: '', patternChar: '_' } : arguments[0];
    var pattern = options.pattern;
    var placeholder = options.placeholder;
    var patternChar = options.patternChar;

    // using 9 for number
    var NUMERIC_REGEX = /^\d$/;
    // using a for alphabet
    var ALPHA_REGEX = /^[a-zA-Z]$/;
    // using * for alphabet
    var ALPHANNUMERIC_REGEX = /^[a-zA-Z\d]$/;

    var patternSelected = pattern;

    var patternCharSelected = patternChar;

    // pattern and placeholder should have the same length
    var placeholderSelected = generatePlaceholderText(placeholder, patternSelected, patternCharSelected);

    var text = '';
    var inputText = '';

    // pending a full check for pattern vs placeholder
    function generatePlaceholderText(_placeholder, _pattern) {
        if (_placeholder === undefined) _placeholder = '';

        var _patternChar = arguments.length <= 2 || arguments[2] === undefined ? '_' : arguments[2];

        var newPlaceholder = _placeholder;

        if (_pattern.length !== _placeholder.length) {
            newPlaceholder = String(_pattern).replace(/[9|a|\*]/g, _patternChar);
        }
        return newPlaceholder;
    }

    function put(_x3) {
        var _this = this;

        var _again = true;

        _function: while (_again) {
            var inputChar = _x3;
            _again = false;

            if (text.length === patternSelected.length) return false;

            // check for pattern character
            var curPatternChar = patternSelected[text.length];
            var curPaceholderChar = placeholderSelected[text.length];

            // need a better check here
            if (curPatternChar === curPaceholderChar) {
                text = text + curPatternChar;
                _x3 = inputChar;
                _again = true;
                curPatternChar = curPaceholderChar = undefined;
                continue _function;
            } else {
                switch (curPatternChar) {
                    case '9':
                        if (!inputChar.match(NUMERIC_REGEX)) return false;
                        break;
                    case 'a':
                        if (!inputChar.match(ALPHA_REGEX)) return false;
                        break;
                    case '*':
                        if (!inputChar.match(ALPHANNUMERIC_REGEX)) return false;
                        break;
                    default:
                        return false;
                }

                text = text + inputChar;
                inputText = inputText + inputChar;

                return _this;
            }
        }
    }

    function back() {

        if (text.length === 0) return false;

        text = text.substring(0, text.length - 1);
        inputText = inputText.substring(0, inputText.length - 1);

        if (text.length > 0) {
            var curPatternChar = patternSelected[text.length - 1];
            var curPaceholderChar = placeholderSelected[text.length - 1];

            if (curPatternChar === curPaceholderChar) {
                text = text.substring(0, text.length - 1);
            }
        }

        return this;
    }

    function getInputText() {

        return inputText;
    }

    function getText() {

        return text;
    }

    function getDisplayText() {

        return text + placeholderSelected.substring(text.length);
    }

    function getSelection() {
        var start = text.length ? text.length - 1 : 0;
        var end = text.length;

        return { start: start, end: end };
    }

    return {
        placeholder: placeholderSelected,
        pattern: patternSelected,
        put: put,
        getText: getText,
        getInputText: getInputText,
        getDisplayText: getDisplayText,
        getSelection: getSelection,
        back: back
    };
}

module.exports = exports['default'];